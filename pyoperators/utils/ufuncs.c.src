/*-*-c-*-*/

/*
 * ufuncs to compute hard_thresholding(p) = log(p/(1-p)) and
 * soft_thresholding(x) = 1/(1+exp(-x))
 */

#include <Python.h>
#include <math.h>

#include "numpy/npy_math.h"
#include "numpy/ndarraytypes.h"
#include "numpy/ufuncobject.h"

/*
 * Inner loops for hard_thresholding and soft_thresholding
 */

/**begin repeat
 * #type = npy_float, npy_double, npy_longdouble#
 * #c = f,,l#
 */

static void
hard_thresholding_loop@c@(char **args, npy_intp *dimensions,
                          npy_intp* steps, void* data)
{
    npy_intp i;
    npy_intp n = dimensions[0];
    char *in = args[0], *threshold = args[1], *out = args[2];
    npy_intp in_step = steps[0], threshold_step = steps[1], out_step = steps[2];

    @type@ tmp;

    for (i = 0; i < n; i++) {
        tmp = *(@type@ *)in;
        tmp = (fabs@c@(tmp) > *(@type@ *)threshold) ? tmp : 0;
        *((@type@ *)out) = tmp;

        in += in_step;
        threshold += threshold_step;
        out += out_step;
    }
}

static void
soft_thresholding_loop@c@(char **args, npy_intp *dimensions,
                          npy_intp* steps, void* data)
{
    npy_intp i;
    npy_intp n = dimensions[0];
    char *in = args[0], *threshold = args[1], *out = args[2];
    npy_intp in_step = steps[0], threshold_step = steps[1], out_step = steps[2];

    @type@ tmp;

    for (i = 0; i < n; i++) {
        tmp = fabs@c@(*(@type@ *)in) - *(@type@ *)threshold;
        tmp = (tmp > 0) ? tmp : 0;
        *((@type@ *)out) = copysign@c@(tmp, *(@type@ *)in);

        in += in_step;
        threshold += threshold_step;
        out += out_step;
    }
}

/**end repeat**/

/*
 * Definitions for the ufuncs.
 */

static PyUFuncGenericFunction soft_thresholding_funcs[3] = {&soft_thresholding_loopf,
                                                            &soft_thresholding_loop,
                                                            &soft_thresholding_loopl};

static PyUFuncGenericFunction hard_thresholding_funcs[3] = {&hard_thresholding_loopf,
                                                            &hard_thresholding_loop,
                                                            &hard_thresholding_loopl};

static char types[9] = {NPY_FLOAT, NPY_FLOAT, NPY_FLOAT,
                        NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE,
                        NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE};

static void *data[3] = {NULL, NULL, NULL};

/* Module definition */

static PyMethodDef module_methods[] = {
    { NULL, NULL, 0, NULL }
};

#if PY_VERSION_HEX >= 0x03000000

static PyModuleDef moduledef = {
    PyModuleDef_HEAD_INIT,
    "ufuncs",
    NULL,
    -1,
    module_methods,
    NULL,
    NULL,
    NULL,
    NULL
};

PyMODINIT_FUNC
PyInit_ufuncs()
{
    PyObject *m, *f, *d;
    m = PyModule_Create(&moduledef);
    if (!m) {
        return NULL;
    }

    import_array();
    import_umath();

    d = PyModule_GetDict(m);

    f = PyUFunc_FromFuncAndData(hard_thresholding_funcs,data, types, 3, 2, 1,
                                PyUFunc_None, "hard_thresholding", NULL , 0);
    PyDict_SetItemString(d, "hard_thresholding", f);
    Py_DECREF(f);

    f = PyUFunc_FromFuncAndData(soft_thresholding_funcs,data, types, 3, 2, 1,
                                PyUFunc_None, "soft_thresholding", NULL , 0);
    PyDict_SetItemString(d, "soft_thresholding", f);
    Py_DECREF(f);

    return m;
}

#else

PyMODINIT_FUNC
initufuncs()
{
    PyObject *m, *f,  *d;

    m  = Py_InitModule("ufuncs", module_methods);
    if (m == NULL) {
        return;
    }

    d = PyModule_GetDict(m);

    import_array();
    import_umath();

    f = PyUFunc_FromFuncAndData(hard_thresholding_funcs,data, types, 3, 2, 1,
                                PyUFunc_None, "hard_thresholding", "Compute y = x1 if |x1| > x2,\n            0  otherwise." , 0);
    PyDict_SetItemString(d , "hard_thresholding", f);
    Py_DECREF(f);


    f = PyUFunc_FromFuncAndData(soft_thresholding_funcs,data, types, 3, 2, 1,
                                PyUFunc_None, "soft_thresholding", "Compute y = sign(x1) * [|x1| - x2]+" , 0);
    PyDict_SetItemString(d , "soft_thresholding", f);
    Py_DECREF(f);
}

#endif
